knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
p_R <- 0.1 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.2 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
sample_size <- 100 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
sample_generate <- function(sample_size = 100, p_R = 0.1, p_T = 0.2) {
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
}
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.2) {
df %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = p_R, p_T = p_T)) %>% bind_rows()
result_df %>% head()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
result_df <- result_df %>%
mutate(p_dif = estimate1 - estimate2)
result_df %>%
ggplot(fill="blue") +
aes(p_dif) +
geom_histogram(binwidth = 0.01)+
theme_minimal()
shapiro.test(result_df$p_dif)
shapiro.test(result_df$p_dif)
library(goft)
cauchy_test(result_df$p_dif)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
result_df %>%
mutate(p_dif = estimate1 - estimate2) %>%
ggplot(fill="blue") +
aes(p_dif) +
geom_histogram(binwidth = 0.01)+
theme_minimal()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.9)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.4)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.3, p_T = 0.4)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
df_OR <- df_trial %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
print(df_OR)
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.1) {
df %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
my_df <- do_experiment()
for (i in 1:(num_repeats-1)) {
my_df <- rbind(my_df, do_experiment())
}
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.1) {
df %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% haead()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% head()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% head()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
result_df %>%
ggplot(fill="blue") +
aes(estimate) +
geom_histogram(binwidth = 0.01)+
theme_minimal()
result_df %>%
select(estimate)
result_df
result_df %>%
select(estimate)
result_df$estimate
result_df %>%
ggplot(fill="blue") +
aes(estimate) +
geom_histogram()+
theme_minimal()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% head()
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.1) {
df %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% head()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
result_df %>%
ggplot(fill="blue") +
aes(estimate) +
geom_histogram()+
theme_minimal()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.1)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.5)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.9)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.1)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.2, p_T = 0.1)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.5)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.5, p_T = 0.6)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
lnorm_test(result_df$estimate)
library(goft)
cauchy_test(result_df$p_dif)
shapiro.test(result_df$p_dif)
library(goft)
library(goft)
library(goft)
library(goft)
cauchy_test(result_df$p_dif)
library(goft)
library(goft)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
p_R <- 0.1 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.2 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
p_R <- 0.1 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.2 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
sample_size <- 100 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
View(df_trial)
View(df_trial)
View(df_prop)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = p_R, p_T = p_T)) %>% bind_rows()
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.2) {
df %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = p_R, p_T = p_T)) %>% bind_rows()
sample_generate <- function(sample_size = 100, p_R = 0.1, p_T = 0.2) {
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
}
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.2) {
df %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = p_R, p_T = p_T)) %>% bind_rows()
result_df %>% head()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
result_df <- result_df %>%
mutate(p_dif = estimate1 - estimate2)
result_df %>%
ggplot(fill="blue") +
aes(p_dif) +
geom_histogram(binwidth = 0.01)+
theme_minimal()
shapiro.test(result_df$p_dif)
library(goft)
cauchy_test(result_df$p_dif)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
result_df %>%
mutate(p_dif = estimate1 - estimate2) %>%
ggplot(fill="blue") +
aes(p_dif) +
geom_histogram(binwidth = 0.01)+
theme_minimal()
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.9)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.4)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.3, p_T = 0.4)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df))
df_OR <- df_trial %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
print(df_OR)
View(df_OR)
do_experiment <- function(df = sample_generate(), p_R = 0.1, p_T = 0.1) {
df %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
}
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.2)) %>% bind_rows()
result_df %>% head()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
result_df %>%
ggplot(fill="blue") +
aes(estimate) +
geom_histogram()+
theme_minimal()
lnorm_test(result_df$estimate)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.15)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.1, p_T = 0.5)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
num_repeats = 1000
result_df <- lapply(1:num_repeats, function(i) do_experiment(p_R = 0.5, p_T = 0.6)) %>% bind_rows()
result_df %>%
group_by(catch) %>%
summarize(n = n(),
p = n / nrow(result_df)*100)
