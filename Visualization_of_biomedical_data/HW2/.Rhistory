stat_compare_means(label = "p.format") +
theme_pubr()
knitr::opts_chunk$set(echo = TRUE)
life_expectancy_data %>%
select_if(is.numeric)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
life_expectancy_data <- readr::read_rds('life_expectancy_data.RDS')
life_expectancy_data %>% glimpse()
life_expectancy_data %>% summary()
library(plotly)
plot_ly(data = life_expectancy_data[(life_expectancy_data$`Rural population` != 0) & (life_expectancy_data$`Sucide Rate` != 0),],
x = ~ `Rural population`,
y = ~ `Sucide Rate`,
color = ~ continent)
library(rstatix)
library(ggpubr)
africa_data <- life_expectancy_data %>%
filter(continent == 'Africa')
americas_data <- life_expectancy_data %>%
filter(continent == 'Americas')
ks_test_result <- ks.test(africa_data$`Life expectancy`, americas_data$`Life expectancy`)
ggboxplot(data = rbind(africa_data, americas_data), x = "continent", y = "Life expectancy",
title = "Comparison of Life Expectancy Distributions",
ylab = "Life Expectancy",
color = "continent") +
stat_compare_means(label = "p.format") +
theme_pubr()
LED_numeric <- life_expectancy_data %>%
select_if(is.numeric)
life_expectancy_data %>%
select_if(is.numeric)
life_expectancy_data %>%
select_if(is.numeric) %>%
select(-Year)
LED_numeric <- life_expectancy_data %>%
select_if(is.numeric) %>%
select(-Year)
corr(LED_numeric)
library(corrplot)
corr(LED_numeric)
cor(LED_numeric)
LED_numeric_cor <- cor(LED_numeric)
library(corrplot)
cor(LED_numeric)
corrplot(cor(LED_numeric), method = 'number')
library(corrr)
LED_numeric %>%
network_plot(min_cor = .0)
LED_numeric %>%
network_plot()
cor(LED_numeric) %>%
network_plot(min_cor = .0)
library(corrr)
LED_numeric %>%
network_plot(min_cor = .0)
library(corrr)
LED_numeric %>%
network_plot(min_cor = .0)
LED_numeric <- life_expectancy_data %>%
select_if(is.numeric) %>%
select(-Year)
cor(LED_numeric)
FALSE) %>%
library(corrr)
LED_numeric %>%
rearrange(method = "MDS", absolute = FALSE) %>%
shave() %>%
rplot(shape = 15, colors = c("red", "green"))
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
LED_numeric_cor %>%
rearrange(method = "MDS", absolute = FALSE) %>%
shave() %>%
rplot(shape = 15, colors = c("red", "green"))
correlation_table <- correlate(LED_numeric, method = "pearson")
correlation_table <- correlate(LED_numeric, method = "pearson")
network_plot(correlation_table)
corrplot(LED_numeric, method = 'color', order = 'alphabet')
corrplot(LED_numeric_cor, method = 'color', order = 'alphabet')
corrplot(data, method = 'color', tl.srt = 45)
corrplot(LED_numeric_cor, method = 'color', tl.srt = 45)
corrplot(data, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45)
library(plotly)
plot_ly(data = life_expectancy_data[(life_expectancy_data$`Rural population` != 0) & (life_expectancy_data$`Sucide Rate` != 0),],
x = ~ `Rural population`,
y = ~ `Sucide Rate`,
color = ~ continent)
library(rstatix)
library(ggpubr)
africa_data <- life_expectancy_data %>%
filter(continent == 'Africa')
americas_data <- life_expectancy_data %>%
filter(continent == 'Americas')
ks_test_result <- ks.test(africa_data$`Life expectancy`, americas_data$`Life expectancy`)
ggboxplot(data = rbind(africa_data, americas_data), x = "continent", y = "Life expectancy",
title = "Comparison of Life Expectancy Distributions",
ylab = "Life Expectancy",
color = "continent") +
stat_compare_means(label = "p.format") +
theme_pubr()
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
LED_numeric_cor %>%
rearrange(method = "MDS", absolute = FALSE) %>%
shave() %>%
rplot(shape = 15, colors = c("red", "green"))
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot.mixed(M, order = 'AOE',  tl.cex = 0.8, tl.col = "blue", tl.srt = 45, )
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot.mixed(LED_numeric_cor, order = 'AOE',  tl.cex = 0.8, tl.col = "blue", tl.srt = 45, )
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
plot(hierarchical_cluster, main = "Dendrogram of Hierarchical Clustering")
library(pheatmap)
library(pheatmap)
pheatmap(LED_numeric,
show_rownames = FALSE,
clustering_distance_rows = pima_clear_dist,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(pima_clear_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(pheatmap)
pheatmap(LED_numeric,
show_rownames = FALSE,
clustering_distance_rows = pima_clear_dist,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(pheatmap)
pheatmap(LED_numeric,
show_rownames = FALSE,
clustering_distance_rows = LED_numeric,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
knitr::opts_chunk$set(echo = TRUE)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster,
cex = 0.1) # cex() - размер лейблов
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster,
cex = 0.1) # cex() - размер лейблов
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster,
cex = 0.1) # cex() - размер лейблов
knitr::opts_chunk$set(echo = TRUE)
fviz_dend(hc, k = 4, cex = 0.4, horiz = TRUE, k_colors = "jco",
rect = TRUE, rect_border = "jco", rect_fill = TRUE)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, k = 4, cex = 0.4, horiz = TRUE, k_colors = "jco",
rect = TRUE, rect_border = "jco", rect_fill = TRUE)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster, k = 4, cex = 0.4, horiz = TRUE, k_colors = "jco",
rect = TRUE, rect_border = "jco", rect_fill = TRUE)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster, k = 3, cex = 0.4, horiz = TRUE, k_colors = "jco",
rect = TRUE, rect_border = "jco", rect_fill = TRUE)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hierarchical_cluster <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hierarchical_cluster, k = 3, cex = 1, horiz = TRUE, k_colors = "jco",
rect = TRUE, rect_border = "jco", rect_fill = TRUE)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 4,
k_colors = "jco", type = "circular") Alabama
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 4,
fviz_dend(hc, cex = 0.5, k = 4, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 4, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 3, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 3, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 3, k_colors = "jco", type = "circular", lower_rect = F)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 3, k_colors = "jco", type = "circular", lower_rect = T)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 5, k_colors = "jco", type = "circular", lower_rect = T)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 10, k_colors = "jco", type = "circular", lower_rect = T)
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 10, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 20, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 5, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.1, k = 5, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 1, k = 5, k_colors = "jco", type = "circular")
library(factoextra)
distance_matrix <- dist(LED_numeric)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 5, k_colors = "jco", type = "circular")
library(factoextra)
LED_numeric_scaled <- scale(LED_numeric)
distance_matrix <- dist(LED_numeric_scaled)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 5, k_colors = "jco", type = "circular")
library(pheatmap)
pheatmap(LED_numeric_scaled,
show_rownames = FALSE,
clustering_distance_rows = distance_matrix,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(factoextra)
LED_numeric_scaled <- scale(LED_numeric)
distance_matrix <- dist(LED_numeric_scaled)
# Выполнение иерархической кластеризации с помощью функции hclust()
hc <- hclust(distance_matrix, method = "ward.D2")
# Визуализация дерева кластеризации
fviz_dend(hc, cex = 0.5, k = 5, k_colors = "jco", type = "circular")
library(FactoMineR)
LED_numeric.pca <- prcomp(LED_numeric,
scale = T) # Не забываем про стандартизацию!
library(FactoMineR)
LED_numeric.pca <- prcomp(LED_numeric,
scale = T) # Не забываем про стандартизацию!
summary(pima_full.pca)
library(FactoMineR)
LED_numeric.pca <- prcomp(LED_numeric,
scale = T) # Не забываем про стандартизацию!
summary(LED_numeric.pca)
ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
library(ggbiplot)
ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
library(ggbiplot)
ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
library(ggbiplot)
fig <- ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggplotly(fig)
install.packages("ggplotly")
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
install.packages(c("plotly", "ggplot2"))
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(ggplot2)
library(plotly)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
ggplotly(fig)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
life_expectancy_data <- readr::read_rds('life_expectancy_data.RDS')
life_expectancy_data %>% glimpse()
life_expectancy_data %>% summary()
library(plotly)
plot_ly(data = life_expectancy_data[(life_expectancy_data$`Rural population` != 0) & (life_expectancy_data$`Sucide Rate` != 0),],
x = ~ `Rural population`,
y = ~ `Sucide Rate`,
color = ~ continent)
?ks.test
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
?corrplot
install.packages("corrr")
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
knitr::opts_chunk$set(echo = TRUE)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
?corrr
datasets::airquality %>%
correlate() %>%
network_plot(min_cor = .2
datasets::airquality %>%
correlate() %>%
network_plot(min_cor = .2)
library(tidyverse)
library(ggplot2)
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
datasets::airquality %>%
correlate() %>%
network_plot(min_cor = .2)
rplot(LED_numeric_cor)
rplot(LED_numeric_cor, tl.srt = 45)
library(corrplot)
LED_numeric_cor <- cor(LED_numeric)
corrplot(LED_numeric_cor, method = 'color', tl.cex = 0.8, tl.col = "blue", tl.srt = 45, order = 'AOE')
library(corrr)
rplot(LED_numeric_cor)
library(corrr)
par(las = 2)
rplot(LED_numeric_cor)
library(corrr)
par(las = 2)
rplot(LED_numeric_cor) +
plt.xticks(rotation=90)
library(corrr)
par(las = 2)
rplot(LED_numeric_cor, plt.xticks(rotation=90))
library(corrr)
rplot(LED_numeric_cor)
library(pheatmap)
pheatmap(LED_numeric_scaled,
show_rownames = FALSE,
clustering_distance_rows = distance_matrix,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(pheatmap)
pheatmap(LED_numeric_scaled,
show_rownames = FALSE,
clustering_distance_rows = distance_matrix,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(pheatmap)
pheatmap(LED_numeric_scaled,
show_rownames = FALSE,
clustering_distance_rows = distance_matrix,
clustering_method = "ward.D2",
cutree_rows = 5,
cutree_cols = length(colnames(LED_numeric_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
library(FactoMineR)
LED_numeric.pca <- prcomp(LED_numeric,
scale = T) # Не забываем про стандартизацию!
summary(LED_numeric.pca)
library(FactoMineR)
LED_numeric.pca <- prcomp(LED_numeric,
scale = T)
summary(LED_numeric.pca)
library(ggbiplot)
fig <- ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
library(ggbiplot)
fig <- ggbiplot(LED_numeric.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggplotly(fig)
library(plotly)
ggplotly(fig)
library(plotly)
ggplotly(fig)
View(LED_numeric)
library(plotly)
ggplotly(fig)
LED_numeric
library(tidymodels)
library(embed)
umap_prep <- recipe(~., data = life_expectancy_data) %>% # "техническая" строка, нужная для работы фреймворка tidymodels
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%  # проводим в UMAP. Используем стандартные настройки. Чтобы менять ключевой параметр (neighbors), нужно больше погружаться в машинное обучение
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
library(tidyverse)
library(ggplot2)
